{"ast":null,"code":"import { authAPI, securityAPI } from \"../Components/api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'NETWORK_AUTH_GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      {\n        return { ...state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const getAuthMe = () => async dispatch => {\n  let response = await authAPI.getAuth();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe, captcha);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthMe());\n  } else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrl());\n    }\n\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error';\n    dispatch(stopSubmit('login', {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCapchaURL();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/viktortursunkulov/Desktop/it/src/Redux/auth-reducer.ts"],"names":["authAPI","securityAPI","stopSubmit","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","id","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthMe","dispatch","response","getAuth","data","resultCode","password","rememberMe","captcha","getCaptchaUrl","message","messages","length","_error","logout","getCapchaURL","url"],"mappings":"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","sourcesContent":["import { authAPI, securityAPI } from \"../Components/api/api\";\nimport { stopSubmit } from \"redux-form\";\n\nconst SET_USER_DATA = 'SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'NETWORK_AUTH_GET_CAPTCHA_URL_SUCCESS';\n\n\n\nlet initialState  = {\n    id: null as null | number, \n    email: null as null | string,\n    login: null as null | string,\n    isAuth: false,\n    captchaUrl: null as null | string,\n}\nexport type InitialStateType = typeof initialState\n\nconst authReducer = (state = initialState, action: any) :InitialStateType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n        case GET_CAPTCHA_URL_SUCCESS: {\n            return {\n                ...state,\n                ...action.payload,\n            }\n        }\n        default:\n            return state;\n    }\n}\n\ntype SetAuthUserDataActionPayloadType = {\n    id: z|null\n    email: string|null\n    login: string|null\n    isAuth: boolean\n}\n\ntype SetAuthUserDataActionType = {\n    type: typeof SET_USER_DATA\n    payload: SetAuthUserDataActionPayloadType\n}\n\nexport const setAuthUserData = (id: number|null, email: string|null, login:string|null, isAuth: boolean) => ({ type: SET_USER_DATA, payload: { id, email, login, isAuth } });\n\nexport type GetCaptchaUrlSuccessActionType = {\n    type: typeof GET_CAPTCHA_URL_SUCCESS\n    payload:{captchaUrl: string}\n}\n\n\n\nexport const getCaptchaUrlSuccess = (captchaUrl: string): GetCaptchaUrlSuccessActionType => ({ type: GET_CAPTCHA_URL_SUCCESS, payload: { captchaUrl } });\n\nexport const getAuthMe = () => async (dispatch: any) => {\n    let response = await authAPI.getAuth();\n    if (response.data.resultCode === 0) {\n        let { id, login, email } = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true));\n    }\n}\n\n\n\nexport const login = (email:string, password:string, rememberMe:boolean, captcha:string) => async (dispatch:any) => {\n    let response = await authAPI.login(email, password, rememberMe, captcha);\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthMe())\n    }\n    else {\n        if (response.data.resultCode === 10) {\n            dispatch(getCaptchaUrl())\n        }\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error';\n        dispatch(stopSubmit('login', { _error: message }))\n    }\n}\n\nexport const logout = () => async (dispatch: any) => {\n    let response = await authAPI.logout();\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false))\n    }\n}\nexport const getCaptchaUrl = () => async (dispatch: any) => {\n    const response = await securityAPI.getCapchaURL();\n    const captchaUrl = response.data.url;\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\n}\n\n\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}