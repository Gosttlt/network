{"ast":null,"code":"var _jsxFileName = \"/Users/viktortursunkulov/Desktop/gitt/network/src/Components/common/Paginator/Paginator.tsx\";\nimport React, { useState } from 'react';\nimport s from './Paginator.module.css';\n\nconst Paginator = ({\n  totalItemsCount,\n  pageSize,\n  onPageChanged,\n  currentPage,\n  portionSize = 10\n}) => {\n  let pageCount = Math.ceil(totalItemsCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pageCount; i++) {\n    pages.push(i);\n  }\n\n  let portionCount = Math.ceil(pageCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionPageNumber = portionNumber * portionSize;\n  return React.createElement(\"div\", {\n    className: s.pogContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, portionNumber > 1 && React.createElement(\"button\", {\n    onClick: () => {\n      setPortionNumber(portionNumber - 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Prev\"), pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(p => React.createElement(\"span\", {\n    onClick: e => {\n      onPageChanged(p);\n    },\n    className: currentPage === p ? s.selectPageActive : '',\n    key: p,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, p)), portionCount > portionNumber && React.createElement(\"button\", {\n    onClick: () => {\n      setPortionNumber(portionNumber + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Next\"));\n};\n\nexport default Paginator;","map":{"version":3,"sources":["/Users/viktortursunkulov/Desktop/gitt/network/src/Components/common/Paginator/Paginator.tsx"],"names":["React","useState","s","Paginator","totalItemsCount","pageSize","onPageChanged","currentPage","portionSize","pageCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pogContainer","filter","p","map","e","selectPageActive"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,CAAP,MAAc,wBAAd;;AAaA,MAAMC,SAA8B,GAAG,CAAC;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA,QAAnB;AAA6BC,EAAAA,aAA7B;AAA4CC,EAAAA,WAA5C;AAAyDC,EAAAA,WAAW,GAAG;AAAvE,CAAD,KAAiF;AACpH,MAAIC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUP,eAAe,GAAGC,QAA5B,CAAhB;AACA,MAAIO,KAAmB,GAAG,EAA1B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,SAArB,EAAgCI,CAAC,EAAjC,EAAqC;AACjCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;;AAED,MAAIE,YAAY,GAAGL,IAAI,CAACC,IAAL,CAAUF,SAAS,GAAGD,WAAtB,CAAnB;AACA,MAAI,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,CAAD,CAAhD;AACA,MAAIiB,qBAAqB,GAAG,CAACF,aAAa,GAAG,CAAjB,IAAsBR,WAAtB,GAAoC,CAAhE;AACA,MAAIW,sBAAsB,GAAGH,aAAa,GAAGR,WAA7C;AAGA,SAAO;AAAK,IAAA,SAAS,EAAEN,CAAC,CAACkB,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEFJ,aAAa,GAAG,CAAhB,IACG;AAAQ,IAAA,OAAO,EAAE,MAAM;AAAEC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAqC,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHD,EAKFJ,KAAK,CAACS,MAAN,CAAaC,CAAC,IAAIA,CAAC,IAAIJ,qBAAL,IAA8BI,CAAC,IAAIH,sBAArD,EAA6EI,GAA7E,CAAiFD,CAAC,IAAI;AAAM,IAAA,OAAO,EAAGE,CAAD,IAAO;AAAElB,MAAAA,aAAa,CAACgB,CAAD,CAAb;AAAkB,KAA1C;AAA4C,IAAA,SAAS,EAAEf,WAAW,KAAKe,CAAhB,GAAoBpB,CAAC,CAACuB,gBAAtB,GAAyC,EAAhG;AAAoG,IAAA,GAAG,EAAEH,CAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6GA,CAA7G,CAAtF,CALE,EAOFP,YAAY,GAAGC,aAAf,IACG;AAAQ,IAAA,OAAO,EAAE,MAAM;AAAEC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAqC,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARD,CAAP;AAaH,CA1BD;;AA4BA,eAAeb,SAAf","sourcesContent":["import React, { useState } from 'react'\nimport s from './Paginator.module.css'\nimport cn from 'classnames'\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    onPageChanged: (pageNumber:number) => void\n    currentPage: number\n    portionSize?:number\n\n}\n\n\nconst Paginator: React.FC<PropsType> = ({ totalItemsCount, pageSize, onPageChanged, currentPage, portionSize = 10 }) => {\n    let pageCount = Math.ceil(totalItemsCount / pageSize);\n    let pages:Array<number> = [];\n    for (let i = 1; i <= pageCount; i++) {\n        pages.push(i)\n    }\n\n    let portionCount = Math.ceil(pageCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n\n    return <div className={s.pogContainer}>\n\n        {portionNumber > 1 &&\n            <button onClick={() => { setPortionNumber(portionNumber - 1) }}>Prev</button>\n        }\n        {pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(p => <span onClick={(e) => { onPageChanged(p) }} className={currentPage === p ? s.selectPageActive : ''} key={p}>{p}</span>)}\n\n        {portionCount > portionNumber &&\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>Next</button>\n        }\n\n    </div>\n\n}\n\nexport default Paginator"]},"metadata":{},"sourceType":"module"}