{"ast":null,"code":"import { authAPI, securityAPI } from \"../Components/api/api\";\nimport { stopSubmit } from \"redux-form\";\nimport { act } from \"react-dom/test-utils\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'NETWORK_AUTH_GET_CAPTCHA_URL_SUCCESS';\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false,\n  captchaUrl: null\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n    case GET_CAPTCHA_URL_SUCCESS:\n      {\n        return { ...state,\n          ...action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nexport const getCaptchaUrlSuccess = captchaUrl => ({\n  type: GET_CAPTCHA_URL_SUCCESS,\n  payload: {\n    captchaUrl\n  }\n});\nexport const getAuthMe = () => async dispatch => {\n  let response = await authAPI.getAuth();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      login,\n      email\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe, captcha) => async dispatch => {\n  let response = await authAPI.login(email, password, rememberMe, captcha);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthMe());\n  } else {\n    if (response.data.resultCode === 10) {\n      dispatch(getCaptchaUrl());\n    }\n\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error';\n    dispatch(stopSubmit('login', {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => async dispatch => {\n  let response = await authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\nexport const getCaptchaUrl = () => async dispatch => {\n  const response = await securityAPI.getCapchaURL();\n  const captchaUrl = response.data.url;\n  dispatch(getCaptchaUrlSuccess(captchaUrl));\n};\nexport default authReducer;","map":{"version":3,"sources":["/Users/viktortursunkulov/Desktop/it/src/Redux/auth-reducer.js"],"names":["authAPI","securityAPI","stopSubmit","act","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","initialState","id","email","login","isAuth","captchaUrl","authReducer","state","action","type","payload","setAuthUserData","getCaptchaUrlSuccess","getAuthMe","dispatch","response","getAuth","data","resultCode","password","rememberMe","captcha","getCaptchaUrl","message","messages","length","_error","logout","getCapchaURL","url"],"mappings":"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","sourcesContent":["import { authAPI, securityAPI } from \"../Components/api/api\";\nimport { stopSubmit } from \"redux-form\";\nimport { act } from \"react-dom/test-utils\";\n\nconst SET_USER_DATA = 'SET_USER_DATA';\nconst GET_CAPTCHA_URL_SUCCESS = 'NETWORK_AUTH_GET_CAPTCHA_URL_SUCCESS';\n\n\nlet initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null,\n}\nconst authReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case SET_USER_DATA:\n        case GET_CAPTCHA_URL_SUCCESS: {\n            return {\n                ...state,\n                ...action.payload,\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport const setAuthUserData = (id, email, login, isAuth) => ({ type: SET_USER_DATA, payload: { id, email, login, isAuth } });\n\nexport const getCaptchaUrlSuccess = (captchaUrl) => ({ type: GET_CAPTCHA_URL_SUCCESS, payload: { captchaUrl } });\n\nexport const getAuthMe = () => async (dispatch) => {\n    let response = await authAPI.getAuth();\n    if (response.data.resultCode === 0) {\n        let { id, login, email } = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true));\n    }\n}\n\n\n\nexport const login = (email, password, rememberMe, captcha) => async (dispatch) => {\n    let response = await authAPI.login(email, password, rememberMe, captcha);\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthMe())\n    }\n    else {\n        if (response.data.resultCode === 10) {\n            dispatch(getCaptchaUrl())\n        }\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error';\n        dispatch(stopSubmit('login', { _error: message }))\n    }\n}\n\nexport const logout = () => async (dispatch) => {\n    let response = await authAPI.logout();\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false))\n    }\n}\nexport const getCaptchaUrl = () => async (dispatch) => {\n    const response = await securityAPI.getCapchaURL();\n    const captchaUrl = response.data.url;\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\n}\n\n\n\nexport default authReducer;"]},"metadata":{},"sourceType":"module"}