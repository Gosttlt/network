{"ast":null,"code":"var _jsxFileName = \"/Users/viktortursunkulov/Desktop/gitt/network/src/Components/common/Paginator/Paginator.jsx\";\nimport React, { useState } from 'react';\nimport s from './Paginator.module.css';\nimport cn from 'classnames';\n\nconst Paginator = ({\n  totalItemsCount,\n  pageSize,\n  onPageChanged,\n  currentPage,\n  portionSize = 10\n}) => {\n  let pageCount = Math.ceil(totalItemsCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pageCount; i++) {\n    pages.push(i);\n  }\n\n  let portionCount = Math.ceil(pageCount / portionSize);\n  let [portionNumber, setPortionNumber] = useState(1);\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rightPortionPageNumber = portionNumber * portionSize;\n  return React.createElement(\"div\", {\n    className: s.pogContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, portionNumber > 1 && React.createElement(\"button\", {\n    onClick: () => {\n      setPortionNumber(portionNumber - 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Prev\"), pages.filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber).map(p => React.createElement(\"span\", {\n    onClick: e => {\n      onPageChanged(p);\n    },\n    className: currentPage === p ? s.selectPageActive : null,\n    key: p,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, p)), portionCount > portionNumber && React.createElement(\"button\", {\n    onClick: () => {\n      setPortionNumber(portionNumber + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Next\"));\n};\n\nexport default Paginator;","map":{"version":3,"sources":["/Users/viktortursunkulov/Desktop/gitt/network/src/Components/common/Paginator/Paginator.jsx"],"names":["React","useState","s","cn","Paginator","totalItemsCount","pageSize","onPageChanged","currentPage","portionSize","pageCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","pogContainer","filter","p","map","e","selectPageActive"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,CAAP,MAAc,wBAAd;AACA,OAAOC,EAAP,MAAe,YAAf;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAACC,EAAAA,eAAD;AAAkBC,EAAAA,QAAlB;AAA4BC,EAAAA,aAA5B;AAA2CC,EAAAA,WAA3C;AAAwDC,EAAAA,WAAW,GAAG;AAAtE,CAAD,KAA+E;AAC7F,MAAIC,SAAS,GAAGC,IAAI,CAACC,IAAL,CAAUP,eAAe,GAAGC,QAA5B,CAAhB;AACA,MAAIO,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,SAArB,EAAgCI,CAAC,EAAjC,EAAqC;AACjCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;;AAEL,MAAIE,YAAY,GAAGL,IAAI,CAACC,IAAL,CAAUF,SAAS,GAACD,WAApB,CAAnB;AACA,MAAI,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,CAAD,CAAhD;AACA,MAAIkB,qBAAqB,GAAG,CAACF,aAAa,GAAG,CAAjB,IAAsBR,WAAtB,GAAoC,CAAhE;AACA,MAAIW,sBAAsB,GAAGH,aAAa,GAAGR,WAA7C;AAGI,SAAO;AAAK,IAAA,SAAS,EAAEP,CAAC,CAACmB,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEFJ,aAAa,GAAG,CAAhB,IACD;AAAQ,IAAA,OAAO,EAAE,MAAM;AAACC,MAAAA,gBAAgB,CAACD,aAAa,GAAE,CAAhB,CAAhB;AAAmC,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHG,EAKVJ,KAAK,CAACS,MAAN,CAAaC,CAAC,IAAIA,CAAC,IAAIJ,qBAAL,IAA+BI,CAAC,IAAEH,sBAApD,EAA4EI,GAA5E,CAAgFD,CAAC,IAAI;AAAM,IAAA,OAAO,EAAGE,CAAD,IAAO;AAAClB,MAAAA,aAAa,CAACgB,CAAD,CAAb;AAAiB,KAAxC;AACtE,IAAA,SAAS,EAAEf,WAAW,KAAKe,CAAhB,GAAoBrB,CAAC,CAACwB,gBAAtB,GAAyC,IADkB;AACZ,IAAA,GAAG,EAAEH,CADO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACHA,CADG,CAArF,CALU,EAQVP,YAAY,GAAGC,aAAf,IACD;AAAQ,IAAA,OAAO,EAAE,MAAM;AAACC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAoC,KAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATW,CAAP;AAcH,CA3BD;;AA6BA,eAAeb,SAAf","sourcesContent":["import React, { useState } from 'react';\nimport s from './Paginator.module.css';\nimport cn from 'classnames';\n\nconst Paginator = ({totalItemsCount, pageSize, onPageChanged, currentPage, portionSize = 10}) => {\n    let pageCount = Math.ceil(totalItemsCount / pageSize);\n    let pages = [];\n    for (let i = 1; i <= pageCount; i++) {\n        pages.push(i)\n    }\n\nlet portionCount = Math.ceil(pageCount/portionSize);\nlet [portionNumber, setPortionNumber] = useState(1);\nlet leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\nlet rightPortionPageNumber = portionNumber * portionSize;\n\n\n    return <div className={s.pogContainer}>\n\n        {portionNumber > 1 && \n        <button onClick={() => {setPortionNumber(portionNumber -1)}}>Prev</button>\n        }\n{pages.filter(p => p >= leftPortionPageNumber &&  p<=rightPortionPageNumber).map(p => <span onClick={(e) => {onPageChanged(p)}}\n                className={currentPage === p ? s.selectPageActive : null} key={p}>{p}</span>)}\n\n{portionCount > portionNumber && \n<button onClick={() => {setPortionNumber(portionNumber + 1)}}>Next</button> \n}\n\n        </div>\n      \n}\n\nexport default Paginator"]},"metadata":{},"sourceType":"module"}