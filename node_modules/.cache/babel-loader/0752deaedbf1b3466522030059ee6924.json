{"ast":null,"code":"import { userAPI } from \"../Components/api/api\";\nimport { updateObjectInArray } from \"../Components/utils/object-helpers\";\nconst FOLLOW_USER = 'FOLLOW-USER';\nconst UNFOLLOW_USER = 'UNFOLLOW-USER';\nconst SET_USERS = 'SET-USERS';\nconst SET_CORRENT_PAGE = 'SET-CORRENT-PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\nlet initialState = {\n  users: [],\n  pageSize: 10,\n  totalUsersCount: 3000,\n  currentPage: 1,\n  isFetching: false,\n  followingInProgress: [] // array users ids\n\n};\n\nconst usersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case FOLLOW_USER:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: true\n        })\n      };\n\n    case UNFOLLOW_USER:\n      return { ...state,\n        users: updateObjectInArray(state.users, action.userId, 'id', {\n          followed: false\n        })\n      };\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: action.users\n        };\n      }\n\n    case SET_CORRENT_PAGE:\n      {\n        return { ...state,\n          currentPage: action.currentPage\n        };\n      }\n\n    case SET_TOTAL_USERS_COUNT:\n      {\n        return { ...state,\n          totalUsersCount: action.count\n        };\n      }\n\n    case TOGGLE_IS_FETCHING:\n      {\n        return { ...state,\n          isFetching: action.isFetching\n        };\n      }\n\n    case TOGGLE_IS_FOLLOWING_PROGRESS:\n      {\n        return { ...state,\n          followingInProgress: action.isFetching ? [...state.followingInProgress, action.id] : state.followingInProgress.filter(id => id != action.id)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const followSuccess = userId => ({\n  type: FOLLOW_USER,\n  userId\n});\nexport const unfollowSuccess = userId => ({\n  type: UNFOLLOW_USER,\n  userId\n});\nexport const setUsers = users => ({\n  type: SET_USERS,\n  users\n});\nexport const setCurrentPage = currentPage => ({\n  type: SET_CORRENT_PAGE,\n  currentPage\n});\nexport const setUsersTotalCount = count => ({\n  type: SET_TOTAL_USERS_COUNT,\n  count\n});\nexport const toggleIsFetching = isFetching => ({\n  type: TOGGLE_IS_FETCHING,\n  isFetching\n});\nexport const toggleFollowingProgress = (isFetching, id) => ({\n  type: TOGGLE_IS_FOLLOWING_PROGRESS,\n  isFetching,\n  id\n});\nexport const getUsers = (currentPage = 1, pageSize = 5) => {\n  return async (dispatch, getState) => {\n    dispatch(setCurrentPage(currentPage));\n    dispatch(toggleIsFetching(true));\n    userAPI.getUsers(currentPage, pageSize).then(data => {\n      dispatch(toggleIsFetching(false));\n      dispatch(setUsers(data.items));\n      dispatch(setUsersTotalCount(data.totalCount));\n    });\n  };\n};\n\nconst followUnfollowFlow = async (userId, dispatch, apiMethod, actionCreator) => {\n  dispatch(toggleFollowingProgress(true, userId));\n  let data = await apiMethod(userId);\n\n  if (data.resultCode == 0) {\n    dispatch(actionCreator(userId));\n  }\n\n  dispatch(toggleFollowingProgress(false, userId));\n};\n\nexport const follow = userId => {\n  return async dispatch => {\n    followUnfollowFlow(userId, dispatch, userAPI.userFollow.bind(userAPI), followSuccess);\n  };\n};\nexport const unfollow = userId => {\n  return async dispatch => {\n    followUnfollowFlow(userId, dispatch, userAPI.userUnfollow.bind(userAPI), unfollowSuccess);\n  };\n};\nexport default usersReducer;","map":{"version":3,"sources":["/Users/viktortursunkulov/Desktop/gitt/network/src/Redux/users-reducer.ts"],"names":["userAPI","updateObjectInArray","FOLLOW_USER","UNFOLLOW_USER","SET_USERS","SET_CORRENT_PAGE","SET_TOTAL_USERS_COUNT","TOGGLE_IS_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","initialState","users","pageSize","totalUsersCount","currentPage","isFetching","followingInProgress","usersReducer","state","action","type","userId","followed","count","id","filter","followSuccess","unfollowSuccess","setUsers","setCurrentPage","setUsersTotalCount","toggleIsFetching","toggleFollowingProgress","getUsers","dispatch","getState","then","data","items","totalCount","followUnfollowFlow","apiMethod","actionCreator","resultCode","follow","userFollow","bind","unfollow","userUnfollow"],"mappings":"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","sourcesContent":["import { UserType } from '../types/types';\nimport { userAPI } from \"../Components/api/api\";\nimport { updateObjectInArray } from \"../Components/utils/object-helpers\";\nimport { PhotosType } from \"../types/types\";\nimport { AppStateType } from './redux-store';\nimport { Dispatch } from 'redux';\nimport { ThunkAction } from 'redux-thunk';\n\nconst FOLLOW_USER = 'FOLLOW-USER';\nconst UNFOLLOW_USER = 'UNFOLLOW-USER';\nconst SET_USERS = 'SET-USERS';\nconst SET_CORRENT_PAGE = 'SET-CORRENT-PAGE';\nconst SET_TOTAL_USERS_COUNT = 'SET-TOTAL-USERS-COUNT';\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING';\nconst TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS';\n\n\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 3000,\n    currentPage: 1,\n    isFetching: false,\n    followingInProgress: [] as Array<number>,// array users ids\n}\ntype InitialStateType = typeof initialState;\n\nconst usersReducer = (state = initialState, action: ActionTypes): InitialStateType => {\n    switch (action.type) {\n        case FOLLOW_USER:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', { followed: true })\n            }\n        case UNFOLLOW_USER:\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', { followed: false })\n            }\n        case SET_USERS: {\n            return { ...state, users: action.users }\n        }\n        case SET_CORRENT_PAGE: {\n            return { ...state, currentPage: action.currentPage }\n        }\n        case SET_TOTAL_USERS_COUNT: {\n            return { ...state, totalUsersCount: action.count }\n        }\n        case TOGGLE_IS_FETCHING: {\n            return { ...state, isFetching: action.isFetching }\n        }\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.id]\n                    : state.followingInProgress.filter(id => id != action.id)\n            }\n        }\n        default:\n            return state;\n    }\n}\n\ntype ActionTypes = FollowSuccessActionType | UnfollowSuccessActionType | SetUsersActionType | SetCurrentPageActionType | \nSetUsersTotalCountActionType | ToggleIsFetchingActionType | ToggleFollowingProgressActionType\n\ntype FollowSuccessActionType = {\n    type: typeof FOLLOW_USER\n    userId: number\n}\nexport const followSuccess = (userId: number):FollowSuccessActionType => ({ type: FOLLOW_USER, userId })\n\ntype UnfollowSuccessActionType = {\n    type: typeof UNFOLLOW_USER\n    userId: number\n}\nexport const unfollowSuccess = (userId:number): UnfollowSuccessActionType => ({ type: UNFOLLOW_USER, userId })\n\ntype SetUsersActionType = { \n    type: typeof SET_USERS\n    users: Array<UserType>\n}\nexport const setUsers = (users: Array<UserType>):SetUsersActionType => ({ type: SET_USERS, users })\n\ntype SetCurrentPageActionType = {\n    currentPage:number\n    type: typeof SET_CORRENT_PAGE\n}\nexport const setCurrentPage = (currentPage:number):SetCurrentPageActionType => ({ type: SET_CORRENT_PAGE, currentPage })\n\ntype SetUsersTotalCountActionType = {\n    count: number\n    type: typeof SET_TOTAL_USERS_COUNT\n}\nexport const setUsersTotalCount = (count: number):SetUsersTotalCountActionType => ({ type: SET_TOTAL_USERS_COUNT, count })\n\ntype ToggleIsFetchingActionType = {\n    type: typeof TOGGLE_IS_FETCHING\n    isFetching: boolean\n}\nexport const toggleIsFetching = (isFetching: boolean):ToggleIsFetchingActionType => ({ type: TOGGLE_IS_FETCHING, isFetching })\n\ntype ToggleFollowingProgressActionType = {\n    isFetching: boolean\n    id: number\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\n}\n\nexport const toggleFollowingProgress = (isFetching: boolean, id:number):ToggleFollowingProgressActionType => ({ type: TOGGLE_IS_FOLLOWING_PROGRESS, isFetching, id })\n\ntype GetStateType = () => AppStateType\ntype DispatchType = Dispatch<ActionTypes>\n\n\nexport const getUsers = (currentPage = 1, pageSize = 5): ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes> => {\n    return async (dispatch, getState) => {\n        dispatch(setCurrentPage(currentPage))\n        dispatch(toggleIsFetching(true));\n        userAPI.getUsers(currentPage, pageSize).then((data:any) => {\n            dispatch(toggleIsFetching(false));\n            dispatch(setUsers(data.items));\n            dispatch(setUsersTotalCount(data.totalCount));\n        });\n\n    }\n}\nconst followUnfollowFlow = async (userId:number, dispatch:any, apiMethod:any, actionCreator:any) => {\n    dispatch(toggleFollowingProgress(true, userId))\n    let data = await apiMethod(userId);\n    if (data.resultCode == 0) {\n        dispatch(actionCreator(userId))\n    }\n    dispatch(toggleFollowingProgress(false, userId))\n}\nexport const follow = (userId:number) => {\n    return async (dispatch:any) => {\n        followUnfollowFlow(userId, dispatch, userAPI.userFollow.bind(userAPI), followSuccess)\n    }\n}\nexport const unfollow = (userId:number) => {\n    return async (dispatch:any) => {\n        followUnfollowFlow(userId, dispatch, userAPI.userUnfollow.bind(userAPI), unfollowSuccess)\n    }\n}\n\nexport default usersReducer;"]},"metadata":{},"sourceType":"module"}